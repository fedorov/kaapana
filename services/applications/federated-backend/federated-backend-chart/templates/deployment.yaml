---
apiVersion: apps/v1
kind: Deployment
metadata:
  # This name uniquely identifies the Deployment
  name: federated-backend
  namespace: {{ .Values.global.base_namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app-name: federated-backend
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app-name: federated-backend
    spec:
      initContainers:
        - name: init
          image: {{  .Values.global.registry_url }}/service_checker:1.1
          imagePullPolicy:  {{ .Values.global.pull_policy_pods }}
          env:
            - name: WAIT
              value: "federated-postgres,federated-postgres-service.base.svc,5432"
            - name: DELAY
              value: "2"
            - name: TIMEOUT
              value: "10"
      containers:
      - name: federated-backend
        image: {{  .Values.global.registry_url }}/federated-backend:0.1.0
        imagePullPolicy:  {{ .Values.global.pull_policy_pods }}
        command: ["/bin/sh"]
        args: ["/app/boot.sh"] 
        env: # Environment variables
        - name: SECRET_KEY
          value: kaapana-secret
        - name: INSTANCE_NAME
          value: {{ .Values.global.instance_name | default "central" }}
        - name: HOSTNAME
          value: {{ .Values.global.hostname | default "" }}
        - name: HTTPS_PORT
          value: "{{ .Values.global.https_port }}"
        - name: PROXY
          value: {{ .Values.global.http_proxy }}
        - name: MINIOUSER
          value: {{ .Values.global.credentials_minio_username  | default "" }}
        - name: MINIOPASSWORD
          value: {{ .Values.global.credentials_minio_password | default ""}}
        - name: APPLICATION_ROOT
          value: "/federated-backend"
        - name: DATABASE_URL
          value: postgresql://federateduser:federatedpassword@federated-postgres-service.base.svc:5432
        - name: REMOTE_SYNC_INTERVAL
          value: "2.5"
        ports: # Port(s) on which your application runs
          - containerPort: 5000
        resources:
          limits:
            memory: "10Gi"
          requests:
            memory: "100Mi"
        volumeMounts:
        ## DEV
        # - name: flask-dev-files
        #   mountPath: /app
        - name: alembic
          mountPath: /app/alembic
      imagePullSecrets:
        - name: registry-secret
      volumes:
      - name: alembic
        hostPath:
          path: {{ .Values.global.fast_data_dir }}/alembic-federated-backend
          # path: /home/kaapana/alembic-federated-backend
          type: DirectoryOrCreate
      ## DEV
      # - name: flask-dev-files
      #   hostPath:
      #     path: /home/ubuntu/dev/federated-backend/docker/files
      #     type: DirectoryOrCreate
---
apiVersion: v1
kind: Service
metadata:
  name: federated-backend-service
  namespace: {{ .Values.global.base_namespace }}
  labels:
    app-name: federated-backend
spec:
  selector:
    app-name: federated-backend
  ports:
    - name: hw-http
      port: 5000 
      targetPort: 5000
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: federated-backend-ingress
  namespace: {{ .Values.global.base_namespace }}
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    traefik.ingress.kubernetes.io/router.middlewares: kube-system-strip-prefix@kubernetescrd # base-strip-prefix-federated-backend@kubernetescrd #, kube-system-errorpages@kubernetescrd
    kubernetes.io/ingress.global-static-ip-name: "kubernetes-ingress"
spec:
  rules:
  - host:
    http:
      paths:
      - path: /federated-backend
        pathType: ImplementationSpecific
        backend:
          service:
            name: federated-backend-service
            port:
              number: 5000